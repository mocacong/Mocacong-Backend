plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.9'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
    id 'org.sonarqube' version '4.2.1.3168'
}

group = 'mocacong'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

jar {
    enabled = false
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'com.amazonaws:aws-java-sdk-ses:1.12.429'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'com.slack.api:slack-api-client:1.29.0'
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:2021.0.5")
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'it.ozimov:embedded-redis:0.7.2'
}

jacoco {
    toolVersion = '0.8.8'
}

test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

def Qdomains = []
for (qPattern in "**/QA" .. "**/QZ") {
    Qdomains.add(qPattern + "*")
}

sonar {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'mocacong'
        property 'sonar.projectKey', 'mocacong_Mocacong-Backend'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/index.xml'
        property 'sonar.sources', 'src'
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.exclusions', '**/test/**, **/resources/**, **/*Application*.java, **/*Controller*.java ,**/config/**'+
                '**/*Response.java, **/*Exception.java, **/security/**, **/support/**, **/Q*.java'
        property 'sonar.test.inclusions', '**/*Test.java'
        property 'sonar.java.coveragePlugin', 'jacoco'
    }
}

jacocoTestReport {
    dependsOn test
    reports{
        html.required.set(true)
        xml.required.set(true)
        html.destination file("$buildDir/reports/jacoco/index.html")
        xml.destination file("$buildDir/reports/jacoco/index.xml")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes:
                            [
                                    "**/*Application*",
                                    "**/*Controller*",
                                    "**/config/*",
                                    "**/dto/*",
                                    "**/exception/*",
                                    "**/security/*",
                                    "**/support/*"
                            ]+ Qdomains)
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            failOnViolation = false
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }

            excludes = [
                    '**.*Application*',
                    '**.*Controller*',
                    '**.config.*',
                    '**.dto.*',
                    '**.exception.*',
                    '**.security.*',
                    '**.support.*'
            ] + Qdomains
        }
    }
}
