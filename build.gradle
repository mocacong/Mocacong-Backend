plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.9'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
}

group = 'mocacong'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

jar {
    enabled = false
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jacoco {
    toolVersion = '0.8.8'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'com.amazonaws:aws-java-sdk-ses:1.12.429'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'com.slack.api:slack-api-client:1.29.0'
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:2021.0.5")
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'it.ozimov:embedded-redis:0.7.2'
}

test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    dependsOn test
    reports{
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(true)
        html.destination file("$buildDir/reports/jacoco/index.html")
        xml.destination file("$buildDir/reports/jacoco/index.xml")
        csv.destination file("$buildDir/reports/jacoco/index.csv")
    }

    def Qdomains = []
    for (qPattern in "**/QA" .. "**/QZ") {
        Qdomains.add(qPattern + "*")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            // 측정 안하고 싶은 패턴
                            "**/*Application*",
                            "**/*Controller*",
                            "**/config/*",
                            "**/dto/*",
                            "**/exception/*",
                            "**/security/*",
                            "**/support/*"
                            // Querydsl 관련 제거
                    ] + Qdomains)
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def Qdomains = []
    for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            failOnViolation = false
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }

            excludes = [
                    "**.*Application*",
                    "**.*Controller*",
                    "**.config.*",
                    "**.dto.*",
                    "**.exception.*",
                    "**.security.*",
                    "**.support.*"
            ] + Qdomains
        }
    }
}
